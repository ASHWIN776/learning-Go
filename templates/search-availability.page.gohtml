{{template "base" .}}

<!-- for own css -->
{{define "css"}}

{{end}}

{{define "content"}}
<div class="container">
    <div class="row mt-3">
        <div class="col-lg-6 mx-auto">
        <h1 class="text-center">Search Availability</h1>

          <form class="needs-validation" id="reservation-form" novalidate>
            <div class="row my-4" id="reservation-dates">
              <div class="col">
                <input placeholder="Arrival" class="form-control" required type="text" name="startDate">
              </div>
              <div class="col">
                <input placeholder="Departure" class="form-control" required type="text" name="endDate">  
              </div>
            </div>

            <button type="submit" class="btn btn-primary">Submit</button>
          </form>
        
        </div>
    </div>

    <div class="row mt-5">
      <div class="col-lg-2">
        <button type="button" id="alertButton" class="btn btn-outline-secondary">Click to alert</button>
      </div>
      <div class="col-lg-2">
        <button type="button" id="toastButton" class="btn btn-outline-success">Show toast</button>
      </div>
      <div class="col-lg-2">
        <button type="button" id="successModalButton" class="btn btn-outline-success">Show success modal</button>
      </div>
      <div class="col-lg-2">
        <button type="button" id="errorModalButton" class="btn btn-outline-success">Show error modal</button>
      </div>
      <div class="col-lg-2">
        <button type="button" id="formModalButton" class="btn btn-outline-success">Show Form</button>
      </div>
    </div>
</div>
{{end}}

<!-- For own js -->
{{define "js"}}
<script>

    let attention = Prompt();

    (() => {
        'use strict'

        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        const forms = document.querySelectorAll('.needs-validation')

        // Loop over them and prevent submission
        Array.from(forms).forEach(form => {
        form.addEventListener('submit', event => {
            if (!form.checkValidity()) {
            event.preventDefault()
            event.stopPropagation()
            }

            form.classList.add('was-validated')
        }, false)
        })
    })()

    const elem = document.getElementById('reservation-dates');
    const rangepicker = new DateRangePicker(elem, {
    // ...options
    }); 

    function alert(type, msg)
    {
        notie.alert({
        type: type,
        text: msg,
        })
    }

    const alertButton = document.querySelector("#alertButton")
    const toastButton = document.querySelector("#toastButton")
    const successModalButton = document.querySelector("#successModalButton")
    const errorModalButton = document.querySelector("#errorModalButton")
    const formModalButton = document.querySelector("#formModalButton")

    alertButton.addEventListener("click", () => {
        alert("success", "Thie is the alert message")
    })

    toastButton.addEventListener("click", () => {
        attention.toast({msg:"Hello World"})
    })

    successModalButton.addEventListener("click", () => {
        attention.success({msg: "This is a success message", title:"Authenticated"})
    })

    errorModalButton.addEventListener("click", () => {
        attention.error({msg: "This is an error message", title: "Auth Error"})
    })

    formModalButton.addEventListener("click", () => {
        const html = `
        <form class="needs-validation" id="reservation-form" novalidate>
            <div class="row w-90 mx-auto my-4" id="reservation-dates-modal">
            <div class="col">
                <input disabled id="startDate" placeholder="Arrival" class="form-control" required type="text" name="startDate">
            </div>
            <div class="col">
                <input disabled id="endDate" placeholder="Departure" class="form-control" required type="text" name="endDate">  
            </div>
            </div>
        </form> 
        `
        attention.custom({title: "Book Rooms", html})
    })

    function Prompt(){
    function toast({
    msg = "",
    icon = "success",
    position = "top-end"
    }){
        const Toast = Swal.mixin({
            toast: true,
            icon,
            position,
            title: msg,
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer)
            toast.addEventListener('mouseleave', Swal.resumeTimer)
            }
        })

        Toast.fire({})
    }

    function success({
    title = "",
    msg = "",
    }){
        Swal.fire({
            icon: 'success',
            title,
            text: msg,
        })
        }

    function error({
    title = "",
    msg = "",
    }){
        Swal.fire({
            icon: 'error',
            title,
            text: msg,
        })
    }

    async function custom({
        title = "",
        html = ""
    }){
        const { value: formValues } = await Swal.fire({
            title,
            html,
            focusConfirm: false,
            showCancelButton: true,
            willOpen: () => {
            const elem = document.getElementById('reservation-dates-modal');
            const rangepicker = new DateRangePicker(elem, {
                showOnFocus: true,
                orientation: "auto top"
            }); 
            },
            preConfirm: () => {
            return [
                document.getElementById('startDate').value,
                document.getElementById('endDate').value
            ]
            },
            didOpen: () => {
            document.getElementById('startDate').removeAttribute("disabled"),
            document.getElementById('endDate').removeAttribute("disabled")
            }
        })

        if (formValues) {
            Swal.fire(JSON.stringify(formValues))
        }
        }

        return {
        toast,
        error,
        success,
        custom
        }
    }


</script>
{{end}}
